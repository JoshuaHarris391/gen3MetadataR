% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Gen3MetadataParser.r
\name{Gen3MetadataParser}
\alias{Gen3MetadataParser}
\title{Gen3 Metadata Parser}
\description{
Gen3 Metadata Parser

Gen3 Metadata Parser
}
\details{
A class to interact with Gen3 metadata API for fetching and processing data.
Perfect for cancer genomics research workflows.
}
\examples{
\dontrun{
parser <- Gen3MetadataParser$new("path/to/keyfile.json")
parser$authenticate()
parser$fetch_data("my_program", "my_project", "sample")
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{key_file_path}}{Path to the JSON authentication key file}

\item{\code{headers}}{HTTP headers for API authentication}

\item{\code{data_store}}{Storage for raw JSON data}

\item{\code{data_store_pd}}{Storage for processed data frames}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Gen3MetadataParser-new}{\code{Gen3MetadataParser$new()}}
\item \href{#method-Gen3MetadataParser-add_quotes_to_json}{\code{Gen3MetadataParser$add_quotes_to_json()}}
\item \href{#method-Gen3MetadataParser-load_api_key}{\code{Gen3MetadataParser$load_api_key()}}
\item \href{#method-Gen3MetadataParser-url_from_jwt}{\code{Gen3MetadataParser$url_from_jwt()}}
\item \href{#method-Gen3MetadataParser-authenticate}{\code{Gen3MetadataParser$authenticate()}}
\item \href{#method-Gen3MetadataParser-json_to_pd}{\code{Gen3MetadataParser$json_to_pd()}}
\item \href{#method-Gen3MetadataParser-fetch_data}{\code{Gen3MetadataParser$fetch_data()}}
\item \href{#method-Gen3MetadataParser-data_to_pd}{\code{Gen3MetadataParser$data_to_pd()}}
\item \href{#method-Gen3MetadataParser-clone}{\code{Gen3MetadataParser$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Gen3MetadataParser-new"></a>}}
\if{latex}{\out{\hypertarget{method-Gen3MetadataParser-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Gen3MetadataParser object.
Sets up storage and headers, and stores the path to the key file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gen3MetadataParser$new(key_file_path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key_file_path}}{Path to the JSON authentication key file.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Gen3MetadataParser-add_quotes_to_json"></a>}}
\if{latex}{\out{\hypertarget{method-Gen3MetadataParser-add_quotes_to_json}{}}}
\subsection{Method \code{add_quotes_to_json()}}{
Attempt to fix malformed JSON by adding quotes around keys and string values.
Used internally when loading API key files that may not be properly formatted.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gen3MetadataParser$add_quotes_to_json(input_str)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_str}}{A string containing the JSON to be fixed.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Gen3MetadataParser-load_api_key"></a>}}
\if{latex}{\out{\hypertarget{method-Gen3MetadataParser-load_api_key}{}}}
\subsection{Method \code{load_api_key()}}{
Load the API key from a JSON file.
Handles both well-formed and some malformed JSON files.
Returns a list representing the credentials.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gen3MetadataParser$load_api_key()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list representing the credentials.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Gen3MetadataParser-url_from_jwt"></a>}}
\if{latex}{\out{\hypertarget{method-Gen3MetadataParser-url_from_jwt}{}}}
\subsection{Method \code{url_from_jwt()}}{
Extract the base API URL from a JWT token found in the credentials.
Decodes the JWT, extracts the issuer, and removes any '/user' suffix.
Returns the base URL as a string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gen3MetadataParser$url_from_jwt(cred)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cred}}{A list of credentials containing the JWT token.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The base API URL as a string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Gen3MetadataParser-authenticate"></a>}}
\if{latex}{\out{\hypertarget{method-Gen3MetadataParser-authenticate}{}}}
\subsection{Method \code{authenticate()}}{
Authenticate with the Gen3 API using the loaded credentials.
Obtains an access token and stores it in the headers for future requests.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gen3MetadataParser$authenticate()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Gen3MetadataParser-json_to_pd"></a>}}
\if{latex}{\out{\hypertarget{method-Gen3MetadataParser-json_to_pd}{}}}
\subsection{Method \code{json_to_pd()}}{
Convert JSON data to a flattened data.frame.
This is similar to converting nested JSON to a pandas DataFrame in Python.
Returns a data.frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gen3MetadataParser$json_to_pd(json_data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{json_data}}{The JSON data to be converted to a data.frame.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A flattened data.frame.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Gen3MetadataParser-fetch_data"></a>}}
\if{latex}{\out{\hypertarget{method-Gen3MetadataParser-fetch_data}{}}}
\subsection{Method \code{fetch_data()}}{
Fetch metadata from the Gen3 API for a given program, project, and node label.
Stores the result in the data_store slot, and optionally returns the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gen3MetadataParser$fetch_data(
  program_name,
  project_code,
  node_label,
  return_data = FALSE,
  api_version = "v0"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{program_name}}{Name of the Gen3 program}

\item{\code{project_code}}{Code of the Gen3 project}

\item{\code{node_label}}{Node label to fetch (e.g., "sample")}

\item{\code{return_data}}{If TRUE, returns the data instead of just storing it}

\item{\code{api_version}}{API version string (default "v0")}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Gen3MetadataParser-data_to_pd"></a>}}
\if{latex}{\out{\hypertarget{method-Gen3MetadataParser-data_to_pd}{}}}
\subsection{Method \code{data_to_pd()}}{
Convert all stored JSON metadata in data_store to data.frames and store in data_store_pd.
Each key in data_store_pd corresponds to a key in data_store.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gen3MetadataParser$data_to_pd()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Gen3MetadataParser-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Gen3MetadataParser-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gen3MetadataParser$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
